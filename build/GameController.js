// Generated by CoffeeScript 1.6.3
(function() {
  var GameController, Garden, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Garden = (function(_super) {
    __extends(Garden, _super);

    function Garden() {
      _ref = Garden.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Garden.property("apples");

    Garden.property("bounds");

    Garden.property("kukac");

    Garden.prototype.init = function() {
      this.apples = [];
      return this.bounds = new Bounds(new Vector(0, 0), new Vector(9, 9));
    };

    Garden.prototype.dropAnApple = function() {
      var apple, randomx, randomy, self;
      self = this;
      apple = new Apple;
      randomx = Math.round(Math.random() * this.bounds.getWidth());
      randomy = Math.round(Math.random() * this.bounds.getHeight());
      apple.position = new Vector(randomx);
      apple.set('position', new Vector(randomx, randomy));
      return this.addTo('apples', apple);
    };

    return Garden;

  })(Observable);

  GameController = (function(_super) {
    __extends(GameController, _super);

    function GameController() {
      _ref1 = GameController.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    GameController.property("garden");

    GameController.property("paused");

    GameController.property("currentTimestep");

    GameController.property("initialTimestep");

    GameController.property("gridstep");

    GameController.prototype.init = function() {
      this._round = 0;
      this._view;
      this._pupupView;
      this._viewForRing = new Hash;
      this._viewForApple = new Hash;
      return this.garden = new Garden;
    };

    GameController.prototype.startSyncWithStorage = function() {
      var data,
        _this = this;
      this.initialTimestep = Number(localStorage.initialTimestep || 200);
      this.addObserver("initialTimestep", function() {
        return localStorage.initialTimestep = _this.initialTimestep;
      });
      this.gridstep = Number(localStorage.gridstep || 20);
      this.addObserver('gridstep', function() {
        return localStorage.gridstep = _this.gridstep;
      });
      data = JSON.parse(localStorage.bounds);
      this.garden.bounds = new Bounds(data.tl || 15, data.br || 15);
      this.garden.addObserver('bounds', function() {
        data = {
          tl: _this.garden.bounds.tl,
          br: _this.garden.bounds.br
        };
        return localStorage.bounds = JSON.stringify(data);
      });
      this._view.style.left = localStorage.viewLeft;
      this._view.style.top = localStorage.viewTop;
      return $(this._view).on("dragstop", function(event, ui) {
        localStorage.viewLeft = _this._view.style.left;
        return localStorage.viewTop = _this._view.style.top;
      });
    };

    GameController.prototype.windowDidLoad = function() {
      var map, self, updateViewSize,
        _this = this;
      self = this;
      self._view = document.getElementById("kukacdiv");
      self._view.style.position = "relative";
      self._toolsView = document.getElementById("tools");
      self._popupView = document.getElementById("popup");
      $(self._view).draggable();
      $(self._view).resizable({
        grid: [this.gridstep, this.gridstep]
      });
      $(self._view).resize(function(event, ui) {
        var height, width;
        width = $(event.target).width() / _this.gridstep - 1;
        height = $(event.target).height() / _this.gridstep - 1;
        return _this.garden.bounds = new Bounds(new Vector(0, 0), new Vector(width, height));
      });
      updateViewSize = function() {
        self._view.style.width = (_this.garden.bounds.getWidth() + 1) * _this.gridstep + "px";
        return self._view.style.height = (_this.garden.bounds.getHeight() + 1) * _this.gridstep + "px";
      };
      updateViewSize();
      this.garden.addObserver("bounds", updateViewSize);
      self.addObserver("gridstep", updateViewSize);
      $(this._toolsView).on("change", "[name=initialTimestep]", function(event, ui) {
        _this["initialTimestep"] = Number(event.target.value);
        return $(event.target).blur();
      });
      this.addObserver("initialTimestep", function(key, change) {
        $("[name=initialTimestep]", _this._toolsView).val(change["new"]);
        return _this.currentTimestep = _this.initialTimestep;
      });
      $(this._toolsView).on("mousedown", "[name=gridstep]", function(event, ui) {
        _this._gardenWidth = $(_this._view).width();
        return _this._gardenHeight = $(_this._view).height();
      });
      $(this._toolsView).on("change", "[name=gridstep]", function(event, ui) {
        console.log("gridstep");
        _this["gridstep"] = Number(event.target.value);
        _this.garden["bounds"] = new Bounds(new Vector(0, 0), new Vector(Math.round(_this._gardenWidth / _this["gridstep"]), Math.round(_this._gardenHeight / _this["gridstep"])));
        return $(event.target).blur();
      });
      this.addObserver("gridstep", function(key, change) {
        return $("[name=gridstep]", _this._toolsView).val(change["new"]);
      });
      $(document).mousemove(function(event, ui) {
        console.log("move");
        document.body.style.cursor = "pointer";
        clearTimeout(_this._hideCursorTimeout);
        return _this._hideCursorTimeout = setTimeout(function() {
          return document.body.style.cursor = "none";
        }, 1000);
      });
      this.startSyncWithStorage();
      /* observe itself*/

      this.addObserver('paused', function(key, change) {
        if (self.paused) {
          return self.showMessage('press a button to continue...');
        } else {
          return self.hideMessage();
        }
      });
      this.garden.addObserver('apples', function(key, change) {
        var apple, _fn, _i, _j, _len, _len1, _ref2, _ref3, _results;
        _ref2 = change.added;
        _fn = function(apple) {
          return self.addViewForApple(apple);
        };
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          apple = _ref2[_i];
          _fn(apple);
        }
        _ref3 = change.removed;
        _results = [];
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          apple = _ref3[_j];
          _results.push((function(apple) {
            return self.removeViewForApple(apple);
          })(apple));
        }
        return _results;
      });
      /* observe kukac*/

      this.garden.addObserver('kukac', function(key, change) {
        var ring, _fn, _fn1, _i, _j, _len, _len1, _ref2, _ref3, _ref4;
        if ((_ref2 = change.old) != null) {
          _ref2.removeObservers('rings');
        }
        if (change.old) {
          _ref3 = change.old.rings;
          _fn = function() {
            return self.removeViewForRing(ring);
          };
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            ring = _ref3[_i];
            _fn();
          }
        }
        if (change["new"]) {
          _ref4 = change["new"].rings;
          _fn1 = function(ring) {
            return self.addViewForRing(ring);
          };
          for (_j = 0, _len1 = _ref4.length; _j < _len1; _j++) {
            ring = _ref4[_j];
            _fn1(ring);
          }
        }
        return change["new"].addObserver('rings', function(key, change) {
          var _fn2, _k, _l, _len2, _len3, _ref5, _ref6, _results;
          _ref5 = change.added;
          _fn2 = function(ring) {
            return self.addViewForRing(ring);
          };
          for (_k = 0, _len2 = _ref5.length; _k < _len2; _k++) {
            ring = _ref5[_k];
            _fn2(ring);
          }
          _ref6 = change.removed;
          _results = [];
          for (_l = 0, _len3 = _ref6.length; _l < _len3; _l++) {
            ring = _ref6[_l];
            _results.push((function(ring) {
              return self.removeViewForRing(ring);
            })(ring));
          }
          return _results;
        });
      });
      self.reset();
      map = {
        13: 40,
        12: 38,
        14: 37,
        15: 39
      };
      $(document).keydown(function(event) {
        var newDir;
        if (_this.paused) {
          _this.play();
        } else if (event.which === 32) {
          _this.pause();
        }
        newDir = new Vector;
        switch (event.which) {
          case 37:
            newDir = new Vector(-1, 0);
            break;
          case 39:
            newDir = new Vector(1, 0);
            break;
          case 38:
            newDir = new Vector(0, -1);
            break;
          case 40:
            newDir = new Vector(0, 1);
            break;
          default:
            newDir = _this.garden.kukac.direction;
        }
        return _this.garden.kukac.direction = newDir;
      });
      this.pause();
      this.showMessage('Press a button to start!');
      return this.garden.dropAnApple();
    };

    GameController.prototype.windowDidUnload = function() {
      return console.log("unload");
    };

    GameController.prototype.reset = function() {
      var kukac, self;
      self = this;
      kukac = new Kukac;
      kukac.set("direction", new Vector(1, 0));
      kukac.set("position", new Vector(2, 2));
      this.garden.kukac = kukac;
      this.currentTimestep = this.initialTimestep;
    };

    GameController.prototype.killKukac = function() {
      var self;
      self = this;
      console.log("kill kukac");
      return self.reset();
    };

    GameController.prototype.gameOver = function() {
      this._round = 0;
      this.killKukac();
      this.pause();
      return this.showMessage("<h2>Game Over!</h2> <br> Press a button to restart!");
    };

    GameController.prototype.gameloop = function() {
      var apple, dist, pos, ring, self, _fn, _i, _j, _len, _len1, _ref2, _ref3;
      self = this;
      /*    ANIMATE*/

      this._round++;
      if (this._round < 4) {
        this.garden.kukac.grow();
      }
      if (Math.random() < 0.2) {
        this.garden.kukac.grow();
      }
      /* move kukac*/

      pos = this.garden.kukac.position;
      pos.add(this.garden.kukac.direction);
      this.garden.kukac.position = pos;
      /*   EAT*/

      _ref2 = self.garden.apples;
      _fn = function(apple) {
        var dst;
        dst = apple.position.dist(self.garden.kukac.position);
        if (dst < 1) {
          self.garden.kukac.shrink();
          self.garden.removeFrom('apples', apple);
          self.garden.dropAnApple();
          return self.currentTimestep *= 0.98;
        }
      };
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        apple = _ref2[_i];
        _fn(apple);
      }
      /*   GAME OVER*/

      if (!this.garden.bounds.contains(self.garden.kukac.position)) {
        this.gameOver();
      }
      _ref3 = self.garden.kukac.rings.slice(1);
      for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
        ring = _ref3[_j];
        dist = ring.position.dist(self.garden.kukac.position);
        if (dist < 1) {
          this.gameOver();
        }
      }
      if (self.garden.kukac.rings.length <= 0) {
        return this.gameOver();
      }
    };

    GameController.prototype.tick = function() {
      var _this = this;
      this.gameloop();
      if (!this.paused) {
        clearTimeout(this._timer);
        return this._timer = setTimeout(function() {
          return _this.tick();
        }, this.currentTimestep);
      }
    };

    GameController.prototype.play = function() {
      this.paused = false;
      this.tick();
    };

    GameController.prototype.pause = function() {
      return this.paused = true;
    };

    GameController.prototype.addViewForApple = function(apple) {
      var circle, self, updateCirclePosition,
        _this = this;
      self = this;
      circle = document.createElement("div");
      $(circle).addClass('apple');
      circle.style.position = "absolute";
      updateCirclePosition = function(circle, apple) {
        circle.style.top = apple.position.y * _this.gridstep + "px";
        circle.style.left = apple.position.x * _this.gridstep + "px";
        circle.style.width = _this.gridstep + "px";
        return circle.style.height = _this.gridstep + "px";
      };
      updateCirclePosition(circle, apple);
      self.addObserver("gridstep", function(key, change) {
        circle = self._viewForApple.getValue(apple);
        updateCirclePosition(circle, apple);
      });
      self._viewForApple.set(apple, circle);
      return $(self._view).prepend(circle);
    };

    GameController.prototype.removeViewForApple = function(apple) {
      var element, self;
      self = this;
      element = self._viewForApple.getValue(apple);
      return $(element).remove();
    };

    GameController.prototype.addViewForRing = function(ring) {
      var circle, self, updateCirclePosition, updateCircleSize,
        _this = this;
      self = this;
      circle = document.createElement("div");
      $(circle).addClass('warmring');
      circle.style.position = "absolute";
      self._viewForRing.set(ring, circle);
      $(self._view).prepend(circle);
      updateCirclePosition = function(circle, ring) {
        circle.style.left = ring.position.x * _this.gridstep + "px";
        return circle.style.top = ring.position.y * _this.gridstep + "px";
      };
      updateCircleSize = function(circle, ring) {
        circle.style.width = _this.gridstep + "px";
        return circle.style.height = _this.gridstep + "px";
      };
      updateCirclePosition(circle, ring);
      updateCircleSize(circle, ring);
      ring.addObserver("position", function(key, change) {
        return updateCirclePosition(self._viewForRing.getValue(ring), ring);
      });
      return self.addObserver("gridstep", function(key, change) {
        circle = self._viewForRing.getValue(ring);
        updateCircleSize(circle, ring);
        return updateCirclePosition(circle, ring);
      });
    };

    GameController.prototype.removeViewForRing = function(ring) {
      var element, self;
      self = this;
      element = self._viewForRing.getValue(ring);
      return $(element).fadeOut(200, function() {
        return $(element).remove();
      });
    };

    GameController.prototype.showMessage = function(message) {
      var self;
      self = this;
      $(self._popupView).html(message);
      return $(self._popupView).fadeIn();
    };

    GameController.prototype.hideMessage = function() {
      var self;
      self = this;
      return $(self._popupView).fadeOut();
    };

    return GameController;

  })(Controller);

  this.GameController = GameController;

}).call(this);
