// Generated by CoffeeScript 1.6.3
(function() {
  var gamepads,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (!navigator.webkitGetGamepads) {
    alert("Gamepad is not supported...");
  }

  gamepads = navigator.webkitGetGamepads();

  this.PS3 = (function() {
    PS3.searchForActiveGamepad = function(callback) {
      var difference, gamepad, index, new_gamepad, status, stored_gamepad, _i, _ref,
        _this = this;
      status = "searching...";
      /* detect active gamepad*/

      gamepads = navigator.webkitGetGamepads();
      if (this.gamepads) {
        for (index = _i = 0, _ref = gamepads.length; 0 <= _ref ? _i <= _ref : _i >= _ref; index = 0 <= _ref ? ++_i : --_i) {
          stored_gamepad = this.gamepads[index];
          new_gamepad = gamepads[index];
          if (stored_gamepad) {
            difference = this.btnDifferenceInGamepads(stored_gamepad, new_gamepad);
            if (difference.length > 0) {
              status = "found";
              callback(new_gamepad);
            }
          }
        }
      }
      this.gamepads = (function() {
        var _j, _len, _results;
        _results = [];
        for (_j = 0, _len = gamepads.length; _j < _len; _j++) {
          gamepad = gamepads[_j];
          _results.push(_.clone(gamepad));
        }
        return _results;
      })();
      if (status !== "found") {
        return window.requestAnimationFrame(function() {
          return _this.searchForActiveGamepad(callback);
        }, 1000);
      }
    };

    PS3.btnDifferenceInGamepads = function(gamepad_A, gamepad_B) {
      var btnIndex, difference, value_A, value_B, _i, _ref;
      difference = [];
      if (gamepad_A && gamepad_B) {
        for (btnIndex = _i = 0, _ref = gamepad_A.buttons.length; 0 <= _ref ? _i <= _ref : _i >= _ref; btnIndex = 0 <= _ref ? ++_i : --_i) {
          value_A = gamepad_A.buttons[btnIndex];
          value_B = gamepad_B.buttons[btnIndex];
          if (value_A !== value_B) {
            difference.push(btnIndex);
          }
        }
        return difference;
      }
    };

    function PS3(gamepadindex) {
      this.tick = __bind(this.tick, this);
      this.gamepadindex = gamepadindex;
      this.ticking = false;
      this._gamepadDetected = false;
      this.buttons = {};
    }

    PS3.prototype.startPolling = function() {
      var ticking;
      if (!ticking) {
        ticking = true;
        return this.tick();
      }
    };

    PS3.prototype.tick = function() {
      this.pollStatus();
      return this.scheduleNextTick();
    };

    PS3.prototype.scheduleNextTick = function() {
      return window.requestAnimationFrame(this.tick);
    };

    PS3.prototype.pollStatus = function() {
      var btnIndex, gamepad, newValue, oldValue, _i, _ref, _results;
      gamepads = navigator.webkitGetGamepads();
      gamepad = gamepads[this.gamepadindex];
      if (gamepad && !this._gamepadDetected) {
        this.buttons = gamepad.buttons;
        this._gamepadDetected = true;
        console.log('gamepad detected', gamepad);
      }
      if (gamepad) {
        _results = [];
        for (btnIndex = _i = 0, _ref = gamepad.buttons.length; 0 <= _ref ? _i <= _ref : _i >= _ref; btnIndex = 0 <= _ref ? ++_i : --_i) {
          newValue = gamepad.buttons[btnIndex];
          oldValue = this.buttons[btnIndex];
          if (newValue !== oldValue) {
            this.buttons[btnIndex] = newValue;
            if (newValue > 0) {
              _results.push(this.buttonPress(btnIndex));
            } else {
              _results.push(void 0);
            }
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };

    PS3.prototype.buttonPress = function(btnIndex) {
      return this.fireKeyBoardOnBtn(btnIndex);
    };

    PS3.prototype.fireKeyBoardOnBtn = function(btnIndex) {
      /* map button index to keyboard keyCode*/

      var keyCode, map;
      map = {
        13: 40,
        12: 38,
        14: 37,
        15: 39,
        9: 32
      };
      keyCode = map[btnIndex];
      /* create keyboard event*/

      return jQuery.event.trigger({
        type: 'keydown',
        which: keyCode
      });
    };

    return PS3;

  })();

  PS3.searchForActiveGamepad(function(gamepad) {
    var ps3;
    ps3 = new PS3(gamepad.index);
    return ps3.startPolling();
  });

}).call(this);
