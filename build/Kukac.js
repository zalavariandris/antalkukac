// Generated by CoffeeScript 1.6.3
(function() {
  var global;

  global = this;

  this.Model = (function() {
    function Model() {
      this._hash = new Object;
      this._events = {};
    }

    Model.prototype.set = function(key, value) {
      this._hash[key] = value;
      return this.notifyObserversForEvent(key, this);
    };

    Model.prototype.get = function(key) {
      return this._hash[key];
    };

    Model.prototype.addObserver = function(observer, event) {
      var observers;
      observers = this._events[event];
      if (!observers) {
        observers = [];
      }
      observers.push(observer);
      return this._events[event] = observers;
    };

    Model.prototype.notifyObserversForEvent = function(event) {
      var observer, observers, _i, _len, _results;
      observers = this._events[event];
      _results = [];
      for (_i = 0, _len = observers.length; _i < _len; _i++) {
        observer = observers[_i];
        _results.push((function(observer) {
          if (observer.observe instanceof Function) {
            return observer.observe();
          }
        })(observer));
      }
      return _results;
    };

    Model.prototype.observe = function(event, observed) {};

    return Model;

  })();

  this.Kukac = (function() {
    function Kukac() {
      var head, self;
      self = this;
      self.direction = new Vector;
      self.speed = 10;
      self.width = 10;
      head = new Ring;
      head.radius = self.width / 2 * 1.2;
      self.rings = [head];
      self.setPosition(new Vector);
    }

    Kukac.prototype.setPosition = function(pos) {
      var i, self, _i, _ref;
      self = this;
      self.position = pos;
      if (self.rings.length > 1) {
        for (i = _i = _ref = self.rings.length - 1; _i >= 1; i = _i += -1) {
          self.rings[i].position = self.rings[i - 1].position.clone();
        }
      }
      return self.rings[0].position = self.position.clone();
    };

    Kukac.prototype.getPosition = function() {
      var self;
      self = this;
      return self.position;
    };

    Kukac.prototype.move = function() {
      var pos, self;
      self = this;
      pos = self.getPosition();
      pos.add(self.direction.clone().scale(self.speed));
      return self.setPosition(pos);
    };

    Kukac.prototype.grow = function() {
      var newRing, self;
      self = this;
      newRing = new Ring;
      newRing.radius = self.width / 2;
      newRing.position = self.rings[self.rings.length - 1].position.clone();
      return self.rings.push(newRing);
    };

    Kukac.prototype.draw = function(ctx) {
      var ring, self, _i, _len, _ref, _results;
      self = this;
      _ref = self.rings;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ring = _ref[_i];
        _results.push(ring.draw(ctx));
      }
      return _results;
    };

    return Kukac;

  })();

  this.Ring = (function() {
    function Ring() {
      var self;
      self = this;
      self.radius = 1;
      self.position = new Vector;
    }

    Ring.prototype.draw = function(ctx) {
      var self;
      self = this;
      ctx.beginPath();
      ctx.arc(self.position.x, self.position.y, self.radius, 0, 2 * Math.PI);
      return ctx.fill();
    };

    return Ring;

  })();

}).call(this);
