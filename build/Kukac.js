// Generated by CoffeeScript 1.6.3
(function() {
  var global, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  global = this;

  this.Kukac = (function(_super) {
    __extends(Kukac, _super);

    Kukac.property("rings");

    Kukac.property("position");

    Kukac.property("direction");

    function Kukac() {
      Kukac.__super__.constructor.call(this);
    }

    Kukac.prototype.init = function() {
      var head, self;
      self = this;
      self.set('rings', []);
      head = new Ring;
      self.addTo('rings', head);
      self.addObserver('position', function(key, change) {
        return self.moveRings();
      });
      return self.position = new Vector;
    };

    Kukac.prototype.moveRings = function() {
      var head, i, self, _i, _ref;
      self = this;
      if (self.rings.length > 1) {
        for (i = _i = _ref = self.rings.length - 1; _i >= 1; i = _i += -1) {
          self.rings[i].set('position', self.rings[i - 1].position.clone());
        }
      }
      head = self.rings[0];
      if (head) {
        return head.position = self.position.clone();
      }
    };

    Kukac.prototype.grow = function() {
      var newRing, self;
      self = this;
      newRing = new Ring;
      newRing.position = self.rings[self.rings.length - 1].position.clone();
      return self.addTo('rings', newRing);
    };

    Kukac.prototype.shrink = function() {
      var last, self;
      self = this;
      last = _.last(self.rings);
      return self.removeFrom('rings', last);
    };

    return Kukac;

  })(Observable);

  this.Ring = (function(_super) {
    __extends(Ring, _super);

    function Ring() {
      _ref = Ring.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Ring.property("position");

    Ring.prototype.init = function() {
      var self;
      self = this;
      return self.position = new Vector;
    };

    return Ring;

  })(Observable);

}).call(this);
