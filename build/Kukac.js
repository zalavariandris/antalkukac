// Generated by CoffeeScript 1.6.3
(function() {
  var global, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  global = this;

  this.Kukac = (function(_super) {
    __extends(Kukac, _super);

    function Kukac() {
      this.head;
      Kukac.__super__.constructor.call(this);
    }

    Kukac.prototype.init = function() {
      var head, self;
      self = this;
      self.set('speed', 20);
      self.set('width', 20);
      self.set('rings', []);
      head = new Ring;
      head.set('radius', self.get('width') / 2 * 1.2);
      self.addTo('rings', head);
      self.addObserver('position', function(key, change) {
        return self.moveRings();
      });
      return self.set("position", new Vector);
    };

    Kukac.prototype.moveRings = function() {
      var i, self, _i, _ref;
      self = this;
      if (self.get('rings').length > 1) {
        for (i = _i = _ref = self.get('rings').length - 1; _i >= 1; i = _i += -1) {
          self.get('rings')[i].set('position', self.get('rings')[i - 1].get('position').clone());
        }
      }
      return self.get('rings')[0].set('position', self.get('position').clone());
    };

    Kukac.prototype.move = function() {
      var pos, self;
      self = this;
      pos = self.get("position");
      pos.add(self.get('direction').clone().scale(self.get('speed')));
      return self.set("position", pos);
    };

    Kukac.prototype.grow = function() {
      var newRing, self;
      self = this;
      newRing = new Ring;
      newRing.set('radius', self.get('width') / 2);
      newRing.set('position', self.get('rings')[self.get('rings').length - 1].get('position').clone());
      return self.addTo('rings', newRing);
    };

    Kukac.prototype.shrink = function() {
      var last, self;
      self = this;
      last = _.last(self.get('rings'));
      return self.removeFrom('rings', last);
    };

    return Kukac;

  })(Observable);

  this.Ring = (function(_super) {
    __extends(Ring, _super);

    function Ring() {
      _ref = Ring.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Ring.prototype.init = function() {
      var self;
      self = this;
      self.set('radius', 1);
      return self.set('position', new Vector);
    };

    Ring.prototype.draw = function(ctx) {
      var pos, self;
      self = this;
      ctx.beginPath();
      pos = self.get('position');
      ctx.arc(pos.x, pos.y, self.get('radius', 0, 2 * Math.PI));
      return ctx.fill();
    };

    return Ring;

  })(Observable);

}).call(this);
