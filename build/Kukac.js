// Generated by CoffeeScript 1.6.3
(function() {
  var global,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  global = this;

  this.Model = (function() {
    function Model() {
      this._hash = new Object;
      this.__listeners = {};
    }

    Model.prototype.set = function(key, value) {
      var event;
      this._hash[key] = value;
      event = {
        type: key,
        target: value
      };
      this.__fire(event);
      return value;
    };

    Model.prototype.get = function(key) {
      return this._hash[key];
    };

    Model.prototype.addListener = function(type, listener) {
      if (!this.__listeners[type]) {
        this.__listeners[type] = [];
      }
      return this.__listeners[type].push(listener);
    };

    Model.prototype.removeListener = function(type) {
      var _ref;
      return (_ref = this.__listeners[type]) != null ? _ref.length = 0 : void 0;
    };

    Model.prototype.__fire = function(event) {
      var listener, listeners, _i, _len, _results;
      if (!event.type) {
        throw new Error("Event Object needs type");
      }
      if (!event.target) {
        event.target = this;
      }
      listeners = this.__listeners[event.type];
      if (listeners) {
        _results = [];
        for (_i = 0, _len = listeners.length; _i < _len; _i++) {
          listener = listeners[_i];
          _results.push(listener.call(this, event));
        }
        return _results;
      }
    };

    return Model;

  })();

  this.Kukac = (function(_super) {
    __extends(Kukac, _super);

    function Kukac() {
      var head, self;
      Kukac.__super__.constructor.call(this);
      self = this;
      self.speed = 20;
      self.width = 20;
      head = new Ring;
      head.radius = self.width / 2 * 1.2;
      self.rings = [head];
      self.addListener('position', function(event) {
        var i, _i, _ref;
        console.log("position has changed");
        if (self.rings.length > 1) {
          for (i = _i = _ref = self.rings.length - 1; _i >= 1; i = _i += -1) {
            self.rings[i].set('position', self.rings[i - 1].get('position').clone());
          }
        }
        return self.rings[0].set('position', self.get('position').clone());
      });
      self.set("position", new Vector);
    }

    Kukac.prototype.move = function() {
      var pos, self;
      self = this;
      pos = self.get("position");
      pos.add(self.get('direction').clone().scale(self.speed));
      return self.set("position", pos);
    };

    Kukac.prototype.grow = function() {
      var newRing, self;
      self = this;
      newRing = new Ring;
      newRing.radius = self.width / 2;
      newRing.set('position', self.rings[self.rings.length - 1].get('position').clone());
      return self.rings.push(newRing);
    };

    Kukac.prototype.draw = function(ctx) {
      var ring, self, _i, _len, _ref, _results;
      self = this;
      _ref = self.rings;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        ring = _ref[_i];
        _results.push(ring.draw(ctx));
      }
      return _results;
    };

    return Kukac;

  })(Model);

  this.Ring = (function(_super) {
    __extends(Ring, _super);

    function Ring() {
      var self;
      Ring.__super__.constructor.call(this);
      self = this;
      self.radius = 1;
      self.set('position', new Vector);
    }

    Ring.prototype.draw = function(ctx) {
      var pos, self;
      self = this;
      ctx.beginPath();
      pos = self.get('position');
      ctx.arc(pos.x, pos.y, self.radius, 0, 2 * Math.PI);
      return ctx.fill();
    };

    return Ring;

  })(Model);

}).call(this);
