// Generated by CoffeeScript 1.6.3
(function() {
  var global;

  global = this;

  this.Controller = (function() {
    function Controller() {
      var self;
      console.log("controller contruct");
      this.fps;
      this.canvas;
      this.objects = [];
      this.timer;
      this.context;
      this.kukac;
      self = this;
      document.addEventListener("DOMContentLoaded", function() {
        console.log("controller dom loaded", self);
        return self.didLoad();
      });
    }

    Controller.prototype.didLoad = function() {
      var canvas, self;
      console.log("conrtoller did load wooo");
      self = this;
      self.fps = 3;
      self.kukac = new Kukac;
      self.objects.push(self.kukac);
      canvas = document.getElementById("myCanvas");
      self.ctx = canvas.getContext("2d");
      global.document.addEventListener("keydown", function(event) {
        switch (event.keyIdentifier) {
          case "Left":
            return self.kukac.direction = new Vector(-1, 0);
          case "Right":
            return self.kukac.direction = new Vector(1, 0);
          case "Up":
            return self.kukac.direction = new Vector(0, -1);
          case "Down":
            return self.kukac.direction = new Vector(0, 1);
        }
      });
      return self.startAnimation();
    };

    Controller.prototype.draw = function() {
      var object, self, _i, _len, _ref, _results;
      self = this;
      self.ctx.clearRect(0, 0, self.ctx.canvas.width, self.ctx.canvas.height);
      _ref = self.objects;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        object = _ref[_i];
        _results.push(object.draw(self.ctx));
      }
      return _results;
    };

    Controller.prototype.animation = function() {
      var self;
      self = this;
      return self.kukac.move();
    };

    Controller.prototype.startAnimation = function() {
      var self;
      self = this;
      return self.timer = setInterval(function() {
        self.animation();
        return self.draw();
      }, 1000 / self.fps);
    };

    Controller.prototype.stopAnimation = function() {
      var self;
      self = this;
      return clearInterval(self.timer);
    };

    +(function(a) {
      return console.log("overload", a);
    });

    return Controller;

  })();

}).call(this);
