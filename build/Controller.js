// Generated by CoffeeScript 1.6.3
(function() {
  var global,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  global = this;

  this.Controller = (function(_super) {
    __extends(Controller, _super);

    function Controller() {
      var _this = this;
      this._round = 0;
      this._gridstep = 20;
      this._view;
      this._pupupView;
      this._viewForRing = new Hash;
      this._viewForApple = new Hash;
      window.addEventListener("load", function() {
        return _this.windowDidLoad();
      });
      window.addEventListener("unload", function() {
        return _this.windowDidUnload();
      });
      Controller.__super__.constructor.call(this);
    }

    Controller.prototype.init = function() {
      return this.set('apples', []);
    };

    Controller.prototype.windowDidLoad = function() {
      var map, self,
        _this = this;
      self = this;
      console.log("app did load");
      self._view = document.getElementById("kukacdiv");
      self._view.style.position = "relative";
      self.bounds = new Bounds(new Vector(0, 0), new Vector($(self._view).width(), $(self._view).height()));
      self._popupView = document.getElementById("popup");
      /* observe itself*/

      this.addObserver('paused', function(key, change) {
        if (self.get('paused')) {
          return self.showMessage('press a button to continue...');
        } else {
          return self.hideMessage();
        }
      });
      this.addObserver('apples', function(key, change) {
        var apple, _fn, _i, _j, _len, _len1, _ref, _ref1, _results;
        _ref = change.added;
        _fn = function(apple) {
          return self.addViewForApple(apple);
        };
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          apple = _ref[_i];
          _fn(apple);
        }
        _ref1 = change.removed;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          apple = _ref1[_j];
          _results.push((function(apple) {
            return self.removeViewForApple(apple);
          })(apple));
        }
        return _results;
      });
      /* observe kukac*/

      this.addObserver('kukac', function(key, change) {
        var ring, _fn, _fn1, _i, _j, _len, _len1, _ref, _ref1, _ref2;
        if ((_ref = change.old) != null) {
          _ref.removeObservers('rings');
        }
        if (change.old) {
          _ref1 = change.old.get('rings');
          _fn = function() {
            return self.removeViewForRing(ring);
          };
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            ring = _ref1[_i];
            _fn();
          }
        }
        if (change["new"]) {
          _ref2 = change["new"].get('rings');
          _fn1 = function(ring) {
            return self.addViewForRing(ring);
          };
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            ring = _ref2[_j];
            _fn1(ring);
          }
        }
        return change["new"].addObserver('rings', function(key, change) {
          var _fn2, _k, _l, _len2, _len3, _ref3, _ref4, _results;
          _ref3 = change.added;
          _fn2 = function(ring) {
            return self.addViewForRing(ring);
          };
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            ring = _ref3[_k];
            _fn2(ring);
          }
          _ref4 = change.removed;
          _results = [];
          for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
            ring = _ref4[_l];
            _results.push((function(ring) {
              return self.removeViewForRing(ring);
            })(ring));
          }
          return _results;
        });
      });
      self.reset();
      map = {
        13: 40,
        12: 38,
        14: 37,
        15: 39
      };
      $(document).keydown(function(event) {
        var kukac, newDir;
        if (_this.get('paused')) {
          _this.play();
        } else if (event.which === 32) {
          _this.pause();
        }
        newDir = new Vector;
        switch (event.which) {
          case 37:
            newDir = new Vector(-1, 0);
            break;
          case 39:
            newDir = new Vector(1, 0);
            break;
          case 38:
            newDir = new Vector(0, -1);
            break;
          case 40:
            newDir = new Vector(0, 1);
            break;
          default:
            newDir = _this.get('kukac').get('direction');
        }
        kukac = _this.get('kukac');
        return kukac.set('direction', newDir);
      });
      this.pause();
      this.showMessage('Press a button to start!');
      return this.dropAnApple();
    };

    Controller.prototype.windowDidUnload = function() {
      return console.log("unload");
    };

    Controller.prototype.reset = function() {
      var kukac, self;
      self = this;
      kukac = new Kukac;
      kukac.set("direction", new Vector(1, 0));
      kukac.set("position", new Vector(90, 50));
      self.set('kukac', kukac);
      return self.timestep = 300;
    };

    Controller.prototype.killKukac = function() {
      var self;
      self = this;
      console.log("kill kukac");
      return self.reset();
    };

    Controller.prototype.gameOver = function() {
      this.killKukac();
      this.pause();
      return this.showMessage("<h2>Game Over!</h2> <br> Press a button to restart!");
    };

    Controller.prototype.dropAnApple = function() {
      var apple, height, randomx, randomy, self, width;
      self = this;
      apple = new Apple;
      width = self.bounds.getWidth() - self._gridstep;
      height = self.bounds.getHeight() - self._gridstep;
      randomx = Math.random();
      randomy = Math.random();
      apple.set('position', new Vector(Math.round(randomx * width / self._gridstep) / Math.round(width / self._gridstep) * width + self._gridstep / 2, Math.round(randomy * height / self._gridstep) / Math.round(height / self._gridstep) * height + self._gridstep / 2));
      return self.addTo('apples', apple);
    };

    Controller.prototype.gameloop = function() {
      var apple, dist, kukac, pos, ring, self, _fn, _i, _j, _len, _len1, _ref, _ref1;
      self = this;
      /*    ANIMATE*/

      this._round++;
      if (this._round < 4) {
        this.get('kukac').grow();
      }
      if (Math.random() < 0.16) {
        self.get('kukac').grow();
      }
      /* move kukac*/

      kukac = this.get('kukac');
      pos = kukac.get('position');
      pos.add(kukac.get('direction').clone().scale(self._gridstep));
      kukac.set('position', pos);
      /*   EAT*/

      _ref = self.get('apples');
      _fn = function(apple) {
        var dst;
        dst = apple.get('position').dist(self.get('kukac').get('position'));
        if (dst < apple.get('size') / 2 + self.get('kukac').get('width') / 2) {
          self.get('kukac').shrink();
          self.removeFrom('apples', apple);
          self.dropAnApple();
          return self.timestep *= 0.95;
        }
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        apple = _ref[_i];
        _fn(apple);
      }
      /*   GAME OVER*/

      if (!this.bounds.contains(self.get('kukac').get("position"))) {
        this.gameOver();
      }
      _ref1 = self.get('kukac').get('rings').slice(1);
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        ring = _ref1[_j];
        dist = ring.get('position').dist(self.get('kukac').get('position'));
        if (dist < self.get('kukac').get('width')) {
          this.gameOver();
        }
      }
      if (self.get('kukac').get('rings').length <= 0) {
        return this.gameOver();
      }
    };

    Controller.prototype.tick = function() {
      var _this = this;
      this.gameloop();
      if (!this.get('paused')) {
        clearTimeout(this._timer);
        return this._timer = setTimeout(function() {
          return _this.tick();
        }, this.timestep);
      }
    };

    Controller.prototype.play = function() {
      this.set('paused', false);
      this.tick();
    };

    Controller.prototype.pause = function() {
      return this.set('paused', true);
    };

    Controller.prototype.addViewForApple = function(apple) {
      var applePos, circle, self;
      self = this;
      circle = document.createElement("div");
      $(circle).addClass('apple');
      circle.style.position = "absolute";
      applePos = apple.get('position');
      circle.style.top = applePos.y - apple.get('size') / 2 + "px";
      circle.style.left = applePos.x - apple.get('size') / 2 + "px";
      circle.style.width = apple.get('size') + "px";
      circle.style.height = apple.get('size') + "px";
      self._viewForApple.set(apple, circle);
      $(self._view).prepend(circle);
      return apple.addObserver('size', function(key, change) {
        var view;
        apple = this;
        view = self._viewForApple.getValue(this);
        view.style.width = change["new"] + "px";
        return view.style.height = change["new"] + "px";
      });
    };

    Controller.prototype.removeViewForApple = function(apple) {
      var element, self;
      self = this;
      element = self._viewForApple.getValue(apple);
      return $(element).remove();
    };

    Controller.prototype.addViewForRing = function(ring) {
      var circle, ringPos, self;
      self = this;
      circle = document.createElement("div");
      $(circle).addClass('warmring');
      circle.style.position = "absolute";
      circle.style.width = ring.get('radius') * 2 + "px";
      circle.style.height = ring.get('radius') * 2 + "px";
      ringPos = ring.get('position');
      circle.style.left = ringPos.x - ring.get('radius') + "px";
      circle.style.top = ringPos.y - ring.get('radius') + "px";
      self._viewForRing.set(ring, circle);
      $(self._view).prepend(circle);
      return ring.addObserver("position", function(key, change) {
        var view;
        view = self._viewForRing.getValue(ring);
        ringPos = ring.get('position');
        view.style.left = ringPos.x - ring.get('radius') + "px";
        return view.style.top = ringPos.y - ring.get('radius') + "px";
      });
    };

    Controller.prototype.removeViewForRing = function(ring) {
      var element, self;
      self = this;
      element = self._viewForRing.getValue(ring);
      return $(element).fadeOut(200, function() {
        return $(element).remove();
      });
    };

    Controller.prototype.showMessage = function(message) {
      var self;
      self = this;
      $(self._popupView).html(message);
      return $(self._popupView).fadeIn();
    };

    Controller.prototype.hideMessage = function() {
      var self;
      self = this;
      return $(self._popupView).fadeOut();
    };

    return Controller;

  })(Observable);

}).call(this);
